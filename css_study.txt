1. position

	1)정적 위치(static position) 지정 방식
		가장 기본적인 방식 , position 속성값이 static으로 설정된 요소는 top, right, bottom, left 속성값에 영향을 받지 않습니다.


	2)상대 위치(relative position) 지정 방식
		상대 위치(relative position) 지정 방식은 해당 HTML 요소의 [기본 위치](자신의 원래 위치)를 기준으로 위치를 설정하는 방식

	3) 고정 위치(fixed position) 지정 방식
		고정 위치(fixed position) 지정 방식은 뷰포트(viewport)를 기준으로 위치를 설정하는 방식
		body 영역이 아닌 독립적인 공간을 갖게 되므로 다른 요소아 겹치게 될 수 있다. (body 의 padding을 조절하여 겹치지 않게한다.)

	4) 절대 위치(absolute position) 지정 방식
		절대 위치(absolute position) 지정 방식은 고정 위치가 뷰포트를 기준으로 위치를 결정하는 것과 비슷하게 동작
		단지 뷰포트(viewport)를 기준으로 하는 것이 아닌 [위치가 설정된](position 값이 static이 아닌값) 조상(ancestor) 요소를 기준으로 위치를 설정 , 관례적으로 absolute의 부모 요소에 relative를 주고 관리한다.
		주의) HTML 문서 상에서 독립되어 앞뒤에 나온 요소와 더 이상 상호작용을 하지 않게 된다는 것 즉 div1 div2 div3 인 상태에서
		div2에 absolute를 주면 div1 div3 div2 t,b,r,l 값을 어떻게 주느냐에 따라 이렇게 될수도 있다는것 이다.

	*) top ,bottom ,right ,left 이 값들의 기준은 모니터에 최상단,최하단,우측,좌측을 각각 기준으로 한다.
---------------------------------------------------------------------------
2. auto , 100%
	100%는 말그대로 자신이 차지할 수 있는 가로폭(부모의 content-box 사이즈)을 모두 다 채워라
	auto;는 적절히 알아서 설정해라 란 뜻입니다. (내부 자식들의 크기만큼 조정)
---------------------------------------------------------------------------
3. *,*:after,*:before { box-sizing: border-box; }
	1) box-sizing : border-box
	전체 크기가 border-box 값이 된다. 즉,	전체 크기 = border-box = content + border + padding + margin , 합산되어 적용한 width/height 값이 적용된다.

	2) box-sizing : content-box 
	전체 크기가 content-box + border + padding + margin 값이 된다. 즉,	전체 크기 = content-box  + border + padding + margin , 
	따라서 border , margin , padding은 width,height 값 외로 따로 합산된다. 그러므로 * 지정한 width,height보다 영역이 더 커질수 있다.
---------------------------------------------------------------------------
4. bottom 고정 방법
<!-- HTML -->
<body>
  <div class="wrapper">
      ...
    <div class="push"></div>
  </div>
  <footer class="footer">...</footer>
</body>
/* CSS */
* {
  margin: 0;
}
/* 리셋을 하지 않은 경우 추가 */

html, body {
   height: 100%;
}

.wrapper {
   min-height: 100%;
   margin: 0 auto -155px;
}
 /* 하단 마진은 푸터의 높이 값과 같다 */

footer, .push {
   height: 155px;
}
/* '.push'는 'footer'와 높이가 같아야 한다. */
---------------------------------------------------------------------------
spinner 같은 로딩 화면을 정중앙에 배치해야 할때		
	position: fixed;    
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
---------------------------------------------------------------------------
체크박스 커스텀
input[type=checkbox] { display: none; }
input[type=checkbox] + label { display: inline-block; cursor: pointer; position: relative;  height: 16px; padding-left: 30px;font-size: 12px; font-weight: 300;color: #acacac;}
input[type=checkbox]+ label:before { content: ""; display: inline-block; width: 28px; height: 19px; position: absolute;  background: url(@/assets/img/etc/tool_ico.png) no-repeat; background-position: -143px -50px; left: 0; top: 0; }
input[type=checkbox]:checked + label { color: #141313; font-weight: 500;  }
input[type=checkbox]:checked + label:before { background-position: -143px -67px; } 

label:before - background-position 을 이용해 background 이미지의 '위치'를 지정한다.
label:before - width, height 값을 적절히 조절해 위치를 잡은 아이콘의 이미지가 잘 보이게끔 한다.
input[type=checkbox] + label - 이 값의 width 값은 비워놔야 한다. 그래야 커스텀 체크박스 옆 글씨가 옆으로 잘 써질 수 있다.
---------------------------------------------------------------------------
inline , block , inline block
inline
display 속성이 inline으로 지정된 엘리먼트는 전후 줄바꿈 없이 한 줄에 다른 엘리먼트들과 나란히 배치됩니다

block
display 속성이 block으로 지정된 엘리먼트는 전후 줄바꿈이 들어가 다른 엘리먼트들을 다른 줄로 밀어내고 혼자 한 줄을 차지합니다.

inline-block
display 속성이 inline-block으로 지정된 엘리먼트는 마치 하이브리드 모드처럼 동작하는데요. 기본적으로 inline 엘리먼트처럼 전후 줄바꿈 없이 한 줄에 다른 엘리먼트들과 나란히 배치되지만, block 엘리먼트처럼 width와 height 속성 지정 및 margin과 padding 속성의 상하 간격 지정이 가능합니다. 다시 말해서, 내부적으로는 block 엘리먼트의 규칙을 따르면서 외부적으로 inline 엘리먼트의 규칙을 따르게 되는 것이지요.
---------------------------------------------------------------------------
하위 조합자 (Descendant combinator)
바로 아래의 자식 요소뿐만 아니라 여러 단계 아래의 후손 요소까지 선택하기 때문에 후손 선택자라고 부릅니다.
h1 em {...}

p.intro a {...}
p .intro a {...}
주의: 위의 두 선택자는 서로 그 의미가 다릅니다.

자식 조합자 (Child combinator)
모든 후손 요소가 아닌 직계 자식 요소만 선택하고 싶다면 > 기호를 사용하는 자식 결합자(child combinator)를 사용할 수 있습니다
body > p {...}
div ol>li p {...}

인접 형제 조합자 (Adjacent sibling combinator)
더하기(+) 기호로 이어진 두 개의 선택자에 해당하는 요소가 서로 부모 요소가 같은 형제 요소이며, 첫 번째 요소의 바로 뒤에 이어지는 두 번째 요소들을 선택합니다. 
h1.opener + h2 {...}

일반 형제 조합자 (General sibling combinator)
물결(~) 기호로 구분된 두 선택자에 해당되는 요소가 서로 부모가 동일한 형제 요소이며, 첫번째 선택자로 선택된 요소의 다음에 나오는 모든 형제 요소 중에서 두번째 선택자에 부합한다면 선택됩니다.
h1 ~ pre {...}
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------





