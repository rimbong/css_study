1. position

	1)정적 위치(static position) 지정 방식
		가장 기본적인 방식 , position 속성값이 static으로 설정된 요소는 top, right, bottom, left 속성값에 영향을 받지 않습니다.


	2)상대 위치(relative position) 지정 방식
		상대 위치(relative position) 지정 방식은 해당 HTML 요소의 [기본 위치](자신의 원래 위치)를 기준으로 위치를 설정하는 방식

	3) 고정 위치(fixed position) 지정 방식
		고정 위치(fixed position) 지정 방식은 뷰포트(viewport)를 기준으로 위치를 설정하는 방식
		body 영역이 아닌 독립적인 공간을 갖게 되므로 다른 요소아 겹치게 될 수 있다. (body 의 padding을 조절하여 겹치지 않게한다.)

	4) 절대 위치(absolute position) 지정 방식
		절대 위치(absolute position) 지정 방식은 고정 위치가 뷰포트를 기준으로 위치를 결정하는 것과 비슷하게 동작
		단지 뷰포트(viewport)를 기준으로 하는 것이 아닌 [위치가 설정된](position 값이 static이 아닌값) 조상(ancestor) 요소를 기준으로 위치를 설정 , 관례적으로 absolute의 부모 요소에 relative를 주고 관리한다.
		주의) HTML 문서 상에서 독립되어 앞뒤에 나온 요소와 더 이상 상호작용을 하지 않게 된다는 것 즉 div1 div2 div3 인 상태에서
		div2에 absolute를 주면 div1 div3 div2 t,b,r,l 값을 어떻게 주느냐에 따라 이렇게 될수도 있다는것 이다.

	*) top ,bottom ,right ,left 이 값들의 기준은 모니터에 최상단,최하단,우측,좌측을 각각 기준으로 한다.
---------------------------------------------------------------------------
2. auto , 100%
	100%는 말그대로 자신이 차지할 수 있는 가로폭(부모의 content-box 사이즈)을 모두 다 채워라
	auto;는 적절히 알아서 설정해라 란 뜻입니다. (내부 자식들의 크기만큼 조정)
---------------------------------------------------------------------------
3. *,*:after,*:before { box-sizing: border-box; }
	1) box-sizing : border-box
	전체 크기가 border-box 값이 된다. 즉,	전체 크기 = border-box = content + border + padding + margin , 합산되어 적용한 width/height 값이 적용된다.

	2) box-sizing : content-box 
	전체 크기가 content-box + border + padding + margin 값이 된다. 즉,	전체 크기 = content-box  + border + padding + margin , 
	따라서 border , margin , padding은 width,height 값 외로 따로 합산된다. 그러므로 * 지정한 width,height보다 영역이 더 커질수 있다.

	3) :before , :after (앞에 세미콜론 2개가 붙어도 같은 의미)
	특정 요소의 앞이나 뒤에 지정한 내용을 추가한다. (여기서 앞이나 뒤는 형재요소가 아닌 해당요소의 내부에서 이루어진다.)
---------------------------------------------------------------------------
4. bottom 고정 방법
<!-- HTML -->
<body>
  <div class="wrapper">
      ...
    <div class="push"></div>
  </div>
  <footer class="footer">...</footer>
</body>
/* CSS */
* {
  margin: 0;
}
/* 리셋을 하지 않은 경우 추가 */

html, body {
   height: 100%;
}

.wrapper {
   min-height: 100%;
   margin: 0 auto -155px;
}
 /* 하단 마진은 푸터의 높이 값과 같다 */

footer, .push {
   height: 155px;
}
/* '.push'는 'footer'와 높이가 같아야 한다. */
---------------------------------------------------------------------------
spinner 같은 로딩 화면을 정중앙에 배치해야 할때		
	position: fixed;    
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
---------------------------------------------------------------------------
가운데,중앙 정렬

1. margin: 0 auto 
margin을 이용해 중앙 정렬시에는 해당 요소에 width값이 수치적으로 정의 되어있고 display가 inline이 아니어야한다.

2. position 이용
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
상위 요소는 relative로 선언 후 사용한다.

3. text-align : center
단순히 텍스트를 가운데 정렬 할 경우 사용한다.
---------------------------------------------------------------------------
체크박스 커스텀
input[type=checkbox] { display: none; }
input[type=checkbox] + label { display: inline-block; cursor: pointer; position: relative;  height: 16px; padding-left: 30px;font-size: 12px; font-weight: 300;color: #acacac;}
input[type=checkbox]+ label:before { content: ""; display: inline-block; width: 28px; height: 19px; position: absolute;  background: url(@/assets/img/etc/tool_ico.png) no-repeat; background-position: -143px -50px; left: 0; top: 0; }
input[type=checkbox]:checked + label { color: #141313; font-weight: 500;  }
input[type=checkbox]:checked + label:before { background-position: -143px -67px; } 

label:before - background-position 을 이용해 background 이미지의 '위치'를 지정한다. 이 위치는 이미지의 크기에서
background-size로 조절한 크기를 기준으로 이동한다.
label:before - width, height 값을 적절히 조절해 위치를 잡은 아이콘의 이미지가 잘 보이게끔 한다.
input[type=checkbox] + label - 이 값의 width 값은 비워놔야 한다. 그래야 커스텀 체크박스 옆 글씨가 옆으로 잘 써질 수 있다.
---------------------------------------------------------------------------
셀렉트박스 커스텀
1. 완전 커스텀	
div.option-select
	input:checkbox
	label
	ul.select-list
		li
체크박스와 라벨을 묶어주어 클릭효과를 이용하였고 , option 대신 ul-li 태그를 사용한다.
.option-select-wrap .option-select label {
    display: block;
    border: 1px solid #ddd;
    font-size: 1.3rem;
    height: 40px;
    border-radius: 3px;
    line-height: 38px;
    padding: 0 15px;
    font-weight: 500;
    background: linear-gradient(top, #ffffff 0%, #f2f2f2 100%);
    background: -ms-linear-gradient(top, #ffffff 0%, #f2f2f2 100%);
    background: -o-linear-gradient(top, #ffffff 0%, #f2f2f2 100%);
    background: -webkit-linear-gradient(top, #ffffff 0%, #f2f2f2 100%);
    background: -moz-linear-gradient(top, #ffffff 0%, #f2f2f2 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0, #ffffff), color-stop(1, #f2f2f2));
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#f2f2f2', gradientType=0);
    transition: border-color .2s ease;
}
.option-select-wrap .option-select label:hover {
    border-color: #ccc;
}

.option-select-wrap .option-select label i {
    float: right;
    line-height: 38px;
}

.option-select-wrap .option-select label i.fa-angle-up {
    display: none;
}

.option-select-wrap .option-select .custom-check:checked + label i.fa-angle-up {
    display: block;
}

.option-select-wrap .option-select .custom-check:checked + label i.fa-angle-down {
    display: none;
}
.option-select-wrap .option-select .select-list {
    background: #fff;
    border: 1px solid #ccc;
    padding: 3px 0;
    display: none;
}

.option-select-wrap .option-select .select-list li {
    border-bottom: 1px solid #eee;
}

.option-select-wrap .option-select .select-list li:last-child {
    border-bottom: none;
}

.option-select-wrap .option-select .select-list li a {
    font-size: 1.2rem;
    color: #555;
    padding: 5px 15px;
    display: block;
    transition: background .2s ease, color 0.2s ease;
}

.option-select-wrap .option-select .select-list li a:hover {
    background: #E4EDFF;
    color: #222;
}

.option-select-wrap .option-select .select-list li a .type {
    margin-right: 20px;
}

.option-select-wrap .option-select .select-list li a .price {
    position: relative;
}

.option-select-wrap .option-select .select-list li a .price:before {
    width: 1px;
    height: 12px;
    background: #e5e5e5;
    left: -12px;
    content: '';
    position: absolute;
    top: 50%;
    margin-top: -5px;
}

.option-select-wrap .option-select .select-list li a .dchain-info {
    margin-bottom: 2px;
}

.option-select-wrap .option-select .select-list li a .dchain-info .code {
    font-size: 1rem;
}

.option-select-wrap .option-select .select-list li a .dchain-info .description {
    font-size: 1.1rem;
}

.option-select-wrap .option-select .custom-check:checked ~ .select-list {
    display: block;
}

.option-select-wrap .selected-option-wrap .selected-option {
    margin-top: 15px;
    border-top: 1px solid #999;
    border-bottom: 1px solid #ddd;
    background: #F8F8F8;
    padding: 15px 20px;
}


2. option은 사용하는 커스텀
체크박스와 비슷하며 label을 이용한다. 
div.select-box{width: 200px;position: relative;z-index: 1;display: inline-block;...}
selectbox:before{background: url(...화살표 이미지 ); content: "";position: absolute;top: 50%;right: 5px;}
label {position: absolute; top: 1px; left: 0;    z-index: -1;text-overflow: ellipsis; overflow: hidden; white-space: nowrap;}
select { opacity: 0;...}

구조는
div.select-box
	label
	select
		option

먼저 select의 전체적인 프레임을 select-box를 이용해 잡는다. 또 relative 속성을 줘야한다.
selectbox:before는 셀렉트의 화살표를 대신할 이미지를 넣어주면된다.
label은 커스텀 select 안에 들어가는 내용이다.
select는 실제 select이지만 가리기 위해서 opacity 0을 준다.
---------------------------------------------------------------------------
inline , block , inline block
inline
display 속성이 inline으로 지정된 엘리먼트는 전후 줄바꿈 없이 한 줄에 다른 엘리먼트들과 나란히 배치됩니다
참고) margin 값이 적용되지 않습니다.

block
display 속성이 block으로 지정된 엘리먼트는 전후 줄바꿈이 들어가 다른 엘리먼트들을 다른 줄로 밀어내고 혼자 한 줄을 차지합니다.

inline-block
display 속성이 inline-block으로 지정된 엘리먼트는 마치 하이브리드 모드처럼 동작하는데요. 기본적으로 inline 엘리먼트처럼 전후 줄바꿈 없이 한 줄에 다른 엘리먼트들과 나란히 배치되지만, block 엘리먼트처럼 width와 height 속성 지정 및 margin과 padding 속성의 상하 간격 지정이 가능합니다. 다시 말해서, 내부적으로는 block 엘리먼트의 규칙을 따르면서 외부적으로 inline 엘리먼트의 규칙을 따르게 되는 것이지요.
---------------------------------------------------------------------------
하위 조합자 (Descendant combinator)
바로 아래의 자식 요소뿐만 아니라 여러 단계 아래의 후손 요소까지 선택하기 때문에 후손 선택자라고 부릅니다.
h1 em {...}

p.intro a {...}
p .intro a {...}
주의: 위의 두 선택자는 서로 그 의미가 다릅니다.

자식 조합자 (Child combinator)
모든 후손 요소가 아닌 직계 자식 요소만 선택하고 싶다면 > 기호를 사용하는 자식 결합자(child combinator)를 사용할 수 있습니다
body > p {...}
div ol>li p {...}

인접 형제 조합자 (Adjacent sibling combinator)
더하기(+) 기호로 이어진 두 개의 선택자에 해당하는 요소가 서로 부모 요소가 같은 형제 요소이며, 첫 번째 요소의 바로 뒤에 이어지는 두 번째 요소들을 선택합니다. 
h1.opener + h2 {...}

일반 형제 조합자 (General sibling combinator)
물결(~) 기호로 구분된 두 선택자에 해당되는 요소가 서로 부모가 동일한 형제 요소이며, 첫번째 선택자로 선택된 요소의 다음에 나오는 모든 형제 요소 중에서 두번째 선택자에 부합한다면 선택됩니다.
h1 ~ pre {...}
---------------------------------------------------------------------------
상태 변화가 일어날때 애니메이션 효과 적용
transition: <property> <duration> <timing-function> <delay>;
transition은 자동으로 발동되지 않는다. :hover와 같은 가상 클래스 선택자(Pseudo-Classes) 또는 JavaScript의 부수적인 액션에 의해 발동한다. 위 예제의 div 요소에 적용된 트랜지션은 이와 같은 부수적 액션없이는 어떤 효과도 볼 수 없다.
예 : 
.alert-pop-wrap { position: fixed; top: 0; left: 0; width: 100%; height: 0; z-index: 999; transition: height 0.7s cubic-bezier(1, 0.09, 0.18, 0.66),padding 0.7s cubic-bezier(1, 0.09, 0.18, 0.66),opacity 0.7s cubic-bezier(1, 0.09, 0.18, 0.66); box-shadow: 0 2px 5px 5px rgba(0,0,0,0.05); padding: 0 20px; overflow: hidden; opacity: 0; }
.alert-pop-wrap.on { height: 50px; padding: 14px 20px; opacity: 1; }
위는 on이라는 클래스가 생성 될 때 transition이 일어난다.
참고 ) cubic-bezier는 3차 베지어 곡선으로 (x1,y1,x2,y2) 두점만 지정해주면 알아서 동작한다.
---------------------------------------------------------------------------
@media 미디어 쿼리 , 반응형웹

@media (조건) {
  스타일
}
1. 좁은 화면 스타일링
	핸드폰처럼 좁은 화면에서만 특정 스타일을 적용하고 싶을 때는 화면의 최대 너비를 조건으로 하여 미디어 쿼리를 사용할 수 있습니다.
	ex)
	@media (max-width: 800px) {
		800px 이하일 경우 스타일이 적용됨.
	}
2. 넓은 화면 스타일링
	반대로 TV처럼 넓은 화면에서만 특정 스타일을 적용하고 싶을 때는 화면의 최소 너비를 조건으로 하여 미디어 쿼리를 사용할 수 있습니다.
	ex)
	@media (min-width: 800px) {
		800px 이상일 경우 스타일이 적용됨.
	}

---------------------------------------------------------------------------
float ,overflow ,ul 각 속성에서 특이점
* float : none / left / right ;
기능1. 이미지 주변에 텍스트를 감싸기 위해 만들어진 프로퍼티
기능2. 해당 영역을 띄운다.(div의 영향을 받지 않음)

* <리스트(li)를 float로 가로(left)를 주고, 부모요소 ul에 배경색을 주기>
- 이때 float로 블록요소인 li가 가로로 배열이 되는 이유?
: 원래 li는 ul이라는 영역 안에서, 한줄을 다 차지하는 블록요소 였음.
근데 float를 쓰면 li가 ul박스 안에서 띄어짐 (ul 영역 위로 띄워지는 형태)
따라서 li가 본인의 크기를 인식을 못하고 콘텐츠 내용의 크기만큼만 너비를 갖게됨.
=> inline-blobk을 쓰는 것과 비슷한 결과

* <li 요소에 float를 적용하면 ul의 배경색이 적용되지 않는다.>
- li가 ul에서 다 위로 떠서 ul영역 밖으로 벗어났기 때문에 ul의 영역이 제대로 인식되어지지 않음.

* <부모요소인 ul에 overflow: hidden; 쓰면 ul의 배경색이 잡히는지?>
- ul의 영역을 확보해주기 위해 overflow:hidden 써준 것인데, 이제 ul이 li의 영역을 인지하게 된다.
	ul위에 떠있는 li까지 영역을 잡게 되서 배경색이 나오게 됨.
	참고) ul에 overflow:hidden를 못쓰는 경우 높이를 주면 됨. (li이 없어진 공간만큼 강제로 높이를 확보해주게 됨.)

      ul {
        width: 500px;
        background-color: skyblue;
        overflow: hidden;        
      }

      li {
        margin-right: 20px;
        list-style: none;
        float: left;     
      }    
    <ul>
      <li>a</li>
      <li>b</li>
      <li>c</li>
      <li>d</li>
      <li>e</li>
      <li>f</li>
    </ul>    
---------------------------------------------------------------------------





